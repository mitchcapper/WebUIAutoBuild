// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace WebUILib
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void WebEventHandler(__IntPtr evt);

    public unsafe partial class Window : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_bind", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Bind(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, __IntPtr func);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_show", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Show(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string content);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_show_browser", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShowBrowser(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string content, ulong browser);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_kiosk", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetKiosk(__IntPtr __instance, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Close(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Destroy(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_root_folder", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetRootFolder(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_file_handler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFileHandler(__IntPtr __instance, __IntPtr handler);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_icon", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetIcon(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string icon, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string icon_type);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_send_raw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendRaw(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string function, __IntPtr raw, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_hide", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetHide(__IntPtr __instance, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_size", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSize(__IntPtr __instance, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPosition(__IntPtr __instance, uint x, uint y);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetProfile(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetProxy(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string proxy_server);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_public", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPublic(__IntPtr __instance, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_navigate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Navigate(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string url);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_delete_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteProfile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_port", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPort(__IntPtr __instance, ulong port);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_run", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Run(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string script);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_script", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Script(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string script, ulong timeout, sbyte* buffer, ulong buffer_length);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_runtime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetRuntime(__IntPtr __instance, ulong runtime);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_bind", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceBind(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, __IntPtr func);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_set_response", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InterfaceSetResponse(__IntPtr __instance, ulong event_number, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string response);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_string_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr InterfaceGetStringAt(__IntPtr __instance, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_int_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long InterfaceGetIntAt(__IntPtr __instance, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_bool_at", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InterfaceGetBoolAt(__IntPtr __instance, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_size_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceGetSizeAt(__IntPtr __instance, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_new_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong WebuiNewWindowId(ulong window_number);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_wait", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiWait();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_exit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiExit();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_default_root_folder", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WebuiSetDefaultRootFolder([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_timeout", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiSetTimeout(ulong second);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_encode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* WebuiEncode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_decode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* WebuiDecode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiFree(__IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_malloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr WebuiMalloc(ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_clean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiClean();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_delete_all_profiles", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WebuiDeleteAllProfiles();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_tls_certificate", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WebuiSetTlsCertificate([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string certificate_pem, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string private_key_pem);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_is_shown", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_url", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetUrl(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_parent_process_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetParentProcessId(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_child_process_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetChildProcessId(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceGetWindowId(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_new_window", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr WebuiNewWindow();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_new_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong WebuiGetNewWindowId();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_is_app_running", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WebuiInterfaceIsAppRunning();
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUILib.Window> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUILib.Window>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::WebUILib.Window managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::WebUILib.Window managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static Window __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Window(native.ToPointer(), skipVTables);
        }

        internal static Window __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Window)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Window __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Window(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Window(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Window(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Bind(string element, global::WebUILib.WebEventHandler func)
        {
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var ___ret = __Internal.Bind(__Instance, element, __arg1);
            return ___ret;
        }

        public bool Show(string content)
        {
            var ___ret = __Internal.Show(__Instance, content);
            return ___ret;
        }

        public bool ShowBrowser(string content, ulong browser)
        {
            var ___ret = __Internal.ShowBrowser(__Instance, content, browser);
            return ___ret;
        }

        public void SetKiosk(bool status)
        {
            __Internal.SetKiosk(__Instance, status);
        }

        public void Close()
        {
            __Internal.Close(__Instance);
        }

        internal void Destroy()
        {
            __Internal.Destroy(__Instance);
        }

        public bool SetRootFolder(string path)
        {
            var ___ret = __Internal.SetRootFolder(__Instance, path);
            return ___ret;
        }

        public void SetFileHandler(global::WebUILib.Delegates.Func___IntPtr_string8_intPtr handler)
        {
            var __arg0 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            __Internal.SetFileHandler(__Instance, __arg0);
        }

        public void SetIcon(string icon, string icon_type)
        {
            __Internal.SetIcon(__Instance, icon, icon_type);
        }

        public void SendRaw(string function, __IntPtr raw, ulong size)
        {
            __Internal.SendRaw(__Instance, function, raw, size);
        }

        public void SetHide(bool status)
        {
            __Internal.SetHide(__Instance, status);
        }

        public void SetSize(uint width, uint height)
        {
            __Internal.SetSize(__Instance, width, height);
        }

        public void SetPosition(uint x, uint y)
        {
            __Internal.SetPosition(__Instance, x, y);
        }

        public void SetProfile(string name, string path)
        {
            __Internal.SetProfile(__Instance, name, path);
        }

        public void SetProxy(string proxy_server)
        {
            __Internal.SetProxy(__Instance, proxy_server);
        }

        public void SetPublic(bool status)
        {
            __Internal.SetPublic(__Instance, status);
        }

        public void Navigate(string url)
        {
            __Internal.Navigate(__Instance, url);
        }

        public void DeleteProfile()
        {
            __Internal.DeleteProfile(__Instance);
        }

        public bool SetPort(ulong port)
        {
            var ___ret = __Internal.SetPort(__Instance, port);
            return ___ret;
        }

        public void Run(string script)
        {
            __Internal.Run(__Instance, script);
        }

        public bool Script(string script, ulong timeout, sbyte* buffer, ulong buffer_length)
        {
            var ___ret = __Internal.Script(__Instance, script, timeout, buffer, buffer_length);
            return ___ret;
        }

        public void SetRuntime(ulong runtime)
        {
            __Internal.SetRuntime(__Instance, runtime);
        }

        public ulong InterfaceBind(string element, global::WebUILib.Delegates.Action_ulong_ulong_string8_ulong_ulong func)
        {
            var __arg1 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var ___ret = __Internal.InterfaceBind(__Instance, element, __arg1);
            return ___ret;
        }

        public void InterfaceSetResponse(ulong event_number, string response)
        {
            __Internal.InterfaceSetResponse(__Instance, event_number, response);
        }

        public string InterfaceGetStringAt(ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetStringAt(__Instance, event_number, index);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public long InterfaceGetIntAt(ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetIntAt(__Instance, event_number, index);
            return ___ret;
        }

        public bool InterfaceGetBoolAt(ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetBoolAt(__Instance, event_number, index);
            return ___ret;
        }

        public ulong InterfaceGetSizeAt(ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetSizeAt(__Instance, event_number, index);
            return ___ret;
        }

        /// <summary>Create a new webui window object using a specified window number.</summary>
        /// <param name="window_number">The window number (should be &gt; 0, and&lt;WEBUI_MAX_IDS)</param>
        /// <returns>Returns the window number.</returns>
        public static ulong WebuiNewWindowId(ulong window_number)
        {
            var ___ret = __Internal.WebuiNewWindowId(window_number);
            return ___ret;
        }

        /// <summary>Wait until all opened windows get closed.</summary>
        public static void WebuiWait()
        {
            __Internal.WebuiWait();
        }

        /// <summary>Close all open windows. `webui_wait()` will return (Break).</summary>
        public static void WebuiExit()
        {
            __Internal.WebuiExit();
        }

        /// <summary>
        /// <para>Set the web-server root folder path for all windows. Should be used</para>
        /// <para>before `webui_show()`.</para>
        /// </summary>
        /// <param name="path">The local folder full path</param>
        public static bool WebuiSetDefaultRootFolder(string path)
        {
            var ___ret = __Internal.WebuiSetDefaultRootFolder(path);
            return ___ret;
        }

        /// <summary>Set the maximum time in seconds to wait for the browser to start.</summary>
        /// <param name="second">The timeout in seconds</param>
        public static void WebuiSetTimeout(ulong second)
        {
            __Internal.WebuiSetTimeout(second);
        }

        /// <summary>
        /// <para>Base64 encoding. Use this to safely send text based data to the UI. If</para>
        /// <para>it fails it will return NULL.</para>
        /// </summary>
        /// <param name="str">The string to encode (Should be null terminated)</param>
        public static sbyte* WebuiEncode(string str)
        {
            var ___ret = __Internal.WebuiEncode(str);
            return ___ret;
        }

        /// <summary>
        /// <para>Base64 decoding. Use this to safely decode received Base64 text from</para>
        /// <para>the UI. If it fails it will return NULL.</para>
        /// </summary>
        /// <param name="str">The string to decode (Should be null terminated)</param>
        public static sbyte* WebuiDecode(string str)
        {
            var ___ret = __Internal.WebuiDecode(str);
            return ___ret;
        }

        /// <summary>Safely free a buffer allocated by WebUI using `webui_malloc()`.</summary>
        /// <param name="ptr">The buffer to be freed</param>
        public static void WebuiFree(__IntPtr ptr)
        {
            __Internal.WebuiFree(ptr);
        }

        /// <summary>
        /// <para>Safely allocate memory using the WebUI memory management system. It</para>
        /// <para>can be safely freed using `webui_free()` at any time.</para>
        /// </summary>
        /// <param name="size">The size of memory in bytes</param>
        public static __IntPtr WebuiMalloc(ulong size)
        {
            var ___ret = __Internal.WebuiMalloc(size);
            return ___ret;
        }

        /// <summary>Free all memory resources. Should be called only at the end.</summary>
        /// <remarks>
        /// <para>webui_wait();</para>
        /// <para>webui_clean();</para>
        /// </remarks>
        public static void WebuiClean()
        {
            __Internal.WebuiClean();
        }

        /// <summary>
        /// <para>Delete all local web-browser profiles folder. It should called at the</para>
        /// <para>end.</para>
        /// </summary>
        /// <remarks>
        /// <para>webui_wait();</para>
        /// <para>webui_delete_all_profiles();</para>
        /// <para>webui_clean();</para>
        /// </remarks>
        public static void WebuiDeleteAllProfiles()
        {
            __Internal.WebuiDeleteAllProfiles();
        }

        /// <summary>
        /// <para>Set the SSL/TLS certificate and the private key content, both in PEM</para>
        /// <para>format. This works only with `webui-2-secure` library. If set empty WebUI</para>
        /// <para>will generate a self-signed certificate.</para>
        /// </summary>
        /// <param name="certificate_pem">The SSL/TLS certificate content in PEM format</param>
        /// <param name="private_key_pem">The private key content in PEM format</param>
        /// <returns>
        /// <para>Returns True if the certificate and the key are valid.</para>
        /// <para>CERTIFICATE-----&quot;-----BEGIN PRIVATE KEY-----</para>
        /// </returns>
        public static bool WebuiSetTlsCertificate(string certificate_pem, string private_key_pem)
        {
            var ___ret = __Internal.WebuiSetTlsCertificate(certificate_pem, private_key_pem);
            return ___ret;
        }

        public bool IsShown
        {
            get
            {
                var ___ret = __Internal.IsShown(__Instance);
                return ___ret;
            }
        }

        public string GetUrl
        {
            get
            {
                var ___ret = __Internal.GetUrl(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public ulong GetParentProcessId
        {
            get
            {
                var ___ret = __Internal.GetParentProcessId(__Instance);
                return ___ret;
            }
        }

        public ulong GetChildProcessId
        {
            get
            {
                var ___ret = __Internal.GetChildProcessId(__Instance);
                return ___ret;
            }
        }

        public ulong InterfaceGetWindowId
        {
            get
            {
                var ___ret = __Internal.InterfaceGetWindowId(__Instance);
                return ___ret;
            }
        }

        /// <summary>Create a new WebUI window object.</summary>
        /// <returns>Returns the window number.</returns>
        internal static global::WebUILib.Window WebuiNewWindow
        {
            get
            {
                var ___ret = __Internal.WebuiNewWindow();
                var __result0 = global::WebUILib.Window.__GetOrCreateInstance(___ret, false);
                return __result0;
            }
        }

        /// <summary>
        /// <para>Get a free window number that can be used with</para>
        /// <para>`webui_new_window_id()`.</para>
        /// </summary>
        /// <returns>Returns the first available free window number. Starting from 1.</returns>
        public static ulong WebuiGetNewWindowId
        {
            get
            {
                var ___ret = __Internal.WebuiGetNewWindowId();
                return ___ret;
            }
        }

        /// <summary>Check if the app still running.</summary>
        /// <returns>Returns True if app is running</returns>
        public static bool WebuiInterfaceIsAppRunning
        {
            get
            {
                var ___ret = __Internal.WebuiInterfaceIsAppRunning();
                return ___ret;
            }
        }
    }

    public enum WebuiBrowsers
    {
        NoBrowser = 0,
        AnyBrowser = 1,
        Chrome = 2,
        Firefox = 3,
        Edge = 4,
        Safari = 5,
        Chromium = 6,
        Opera = 7,
        Brave = 8,
        Vivaldi = 9,
        Epic = 10,
        Yandex = 11,
        ChromiumBased = 12
    }

    public enum WebuiRuntimes
    {
        None = 0,
        Deno = 1,
        NodeJS = 2
    }

    public enum EventType
    {
        DISCONNECTED = 0,
        CONNECTED = 1,
        MOUSE_CLICK = 2,
        NAVIGATION = 3,
        CALLBACK = 4
    }

    public unsafe partial class WebUIEvent : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal __IntPtr window;
            internal global::WebUILib.EventType event_type;
            internal __IntPtr element;
            internal ulong event_number;
            internal ulong bind_id;
            internal ulong magic_cookie;

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_int_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetIntAt(__IntPtr __instance, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_string_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStringAt(__IntPtr __instance, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_bool_at", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBoolAt(__IntPtr __instance, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_size_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSizeAt(__IntPtr __instance, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_int", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnInt(__IntPtr __instance, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnString(__IntPtr __instance, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_bool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnBool(__IntPtr __instance, bool b);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_int", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetInt(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetString(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_bool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_size", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSize(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUILib.WebUIEvent> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUILib.WebUIEvent>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::WebUILib.WebUIEvent managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::WebUILib.WebUIEvent managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __element_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static WebUIEvent __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new WebUIEvent(native.ToPointer(), skipVTables);
        }

        internal static WebUIEvent __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (WebUIEvent)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static WebUIEvent __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new WebUIEvent(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WebUIEvent(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected WebUIEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__element_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->element);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public long GetIntAt(ulong index)
        {
            var ___ret = __Internal.GetIntAt(__Instance, index);
            return ___ret;
        }

        public string GetStringAt(ulong index)
        {
            var ___ret = __Internal.GetStringAt(__Instance, index);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        public bool GetBoolAt(ulong index)
        {
            var ___ret = __Internal.GetBoolAt(__Instance, index);
            return ___ret;
        }

        public ulong GetSizeAt(ulong index)
        {
            var ___ret = __Internal.GetSizeAt(__Instance, index);
            return ___ret;
        }

        public void ReturnInt(long n)
        {
            __Internal.ReturnInt(__Instance, n);
        }

        public void ReturnString(string s)
        {
            __Internal.ReturnString(__Instance, s);
        }

        public void ReturnBool(bool b)
        {
            __Internal.ReturnBool(__Instance, b);
        }

        public global::WebUILib.Window Window
        {
            get
            {
                var __result0 = global::WebUILib.Window.__GetOrCreateInstance(((__Internal*)__Instance)->window, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->window = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::WebUILib.EventType EventType
        {
            get
            {
                return ((__Internal*)__Instance)->event_type;
            }

            set
            {
                ((__Internal*)__Instance)->event_type = value;
            }
        }

        public string Element
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->element);
            }

            set
            {
                if (__element_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->element);
                __element_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->element = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->element = (__IntPtr) __bytePtr0;
            }
        }

        public ulong EventNumber
        {
            get
            {
                return ((__Internal*)__Instance)->event_number;
            }

            set
            {
                ((__Internal*)__Instance)->event_number = value;
            }
        }

        public ulong BindId
        {
            get
            {
                return ((__Internal*)__Instance)->bind_id;
            }

            set
            {
                ((__Internal*)__Instance)->bind_id = value;
            }
        }

        public ulong MagicCookie
        {
            get
            {
                return ((__Internal*)__Instance)->magic_cookie;
            }

            set
            {
                ((__Internal*)__Instance)->magic_cookie = value;
            }
        }

        public long GetInt
        {
            get
            {
                var ___ret = __Internal.GetInt(__Instance);
                return ___ret;
            }
        }

        public string GetString
        {
            get
            {
                var ___ret = __Internal.GetString(__Instance);
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
            }
        }

        public bool GetBool
        {
            get
            {
                var ___ret = __Internal.GetBool(__Instance);
                return ___ret;
            }
        }

        public ulong GetSize
        {
            get
            {
                var ___ret = __Internal.GetSize(__Instance);
                return ___ret;
            }
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr_string8_intPtr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, int* length);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_ulong_ulong_string8_ulong_ulong(ulong window, ulong event_type, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, ulong event_number, ulong bind_id);
    }
}
