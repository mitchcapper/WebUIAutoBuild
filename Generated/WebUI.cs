// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace WebUI
{
    public enum Browsers
    {
        NoBrowser = 0,
        AnyBrowser = 1,
        Chrome = 2,
        Firefox = 3,
        Edge = 4,
        Safari = 5,
        Chromium = 6,
        Opera = 7,
        Brave = 8,
        Vivaldi = 9,
        Epic = 10,
        Yandex = 11,
        ChromiumBased = 12
    }

    public enum Runtimes
    {
        None = 0,
        Deno = 1,
        NodeJS = 2
    }

    public enum EventType
    {
        DISCONNECTED = 0,
        CONNECTED = 1,
        MOUSE_CLICK = 2,
        NAVIGATION = 3,
        CALLBACK = 4
    }

    public unsafe partial class Event : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 48)]
        public partial struct __Internal
        {
            internal ulong window;
            internal ulong event_type;
            internal __IntPtr element;
            internal ulong event_number;
            internal ulong bind_id;
            internal ulong magic_cookie;
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUI.Event> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::WebUI.Event>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::WebUI.Event managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::WebUI.Event managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __element_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static Event __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new Event(native.ToPointer(), skipVTables);
        }

        internal static Event __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (Event)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static Event __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Event(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Event(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected Event(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__element_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->element);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Window
        {
            get
            {
                return ((__Internal*)__Instance)->window;
            }

            set
            {
                ((__Internal*)__Instance)->window = value;
            }
        }

        public ulong EventType
        {
            get
            {
                return ((__Internal*)__Instance)->event_type;
            }

            set
            {
                ((__Internal*)__Instance)->event_type = value;
            }
        }

        public string Element
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->element);
            }

            set
            {
                if (__element_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->element);
                __element_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->element = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->element = (__IntPtr) __bytePtr0;
            }
        }

        public ulong EventNumber
        {
            get
            {
                return ((__Internal*)__Instance)->event_number;
            }

            set
            {
                ((__Internal*)__Instance)->event_number = value;
            }
        }

        public ulong BindId
        {
            get
            {
                return ((__Internal*)__Instance)->bind_id;
            }

            set
            {
                ((__Internal*)__Instance)->bind_id = value;
            }
        }

        public ulong MagicCookie
        {
            get
            {
                return ((__Internal*)__Instance)->magic_cookie;
            }

            set
            {
                ((__Internal*)__Instance)->magic_cookie = value;
            }
        }
    }

    public unsafe partial class webui
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_new_window", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong NewWindow();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_new_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong NewWindowId(ulong window_number);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_new_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetNewWindowId();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_bind", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong Bind(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, __IntPtr func);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_show", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Show(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string content);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_show_browser", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShowBrowser(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string content, ulong browser);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_kiosk", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetKiosk(ulong window, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_wait", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Wait();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Close(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Destroy(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_exit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Exit();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_root_folder", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetRootFolder(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_default_root_folder", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDefaultRootFolder([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_file_handler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFileHandler(ulong window, __IntPtr handler);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_is_shown", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_timeout", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetTimeout(ulong second);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_icon", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetIcon(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string icon, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string icon_type);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_encode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Encode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_decode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* Decode([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string str);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_free", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Free(__IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_malloc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Malloc(ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_send_raw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendRaw(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string function, __IntPtr raw, ulong size);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_hide", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetHide(ulong window, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_size", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSize(ulong window, uint width, uint height);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_position", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPosition(ulong window, uint x, uint y);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetProfile(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string path);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_proxy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetProxy(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string proxy_server);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_url", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetUrl(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_public", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPublic(ulong window, bool status);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_navigate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Navigate(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string url);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_clean", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Clean();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_delete_all_profiles", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteAllProfiles();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_delete_profile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteProfile(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_parent_process_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetParentProcessId(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_child_process_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetChildProcessId(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_port", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetPort(ulong window, ulong port);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_tls_certificate", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetTlsCertificate([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string certificate_pem, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string private_key_pem);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_run", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Run(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string script);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_script", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Script(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string script, ulong timeout, sbyte* buffer, ulong buffer_length);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_set_runtime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetRuntime(ulong window, ulong runtime);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_int_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetIntAt(__IntPtr e, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_int", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetInt(__IntPtr e);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_string_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStringAt(__IntPtr e, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetString(__IntPtr e);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_bool_at", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBoolAt(__IntPtr e, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_bool", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetBool(__IntPtr e);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_size_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSizeAt(__IntPtr e, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_get_size", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSize(__IntPtr e);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_int", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnInt(__IntPtr e, long n);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_string", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnString(__IntPtr e, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string s);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_return_bool", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReturnBool(__IntPtr e, bool b);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_bind", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceBind(ulong window, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, __IntPtr func);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_set_response", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InterfaceSetResponse(ulong window, ulong event_number, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string response);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_is_app_running", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InterfaceIsAppRunning();

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_window_id", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceGetWindowId(ulong window);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_string_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr InterfaceGetStringAt(ulong window, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_int_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long InterfaceGetIntAt(ulong window, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_bool_at", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InterfaceGetBoolAt(ulong window, ulong event_number, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("webui-2.dll", EntryPoint = "webui_interface_get_size_at", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong InterfaceGetSizeAt(ulong window, ulong event_number, ulong index);
        }

        /// <summary>Create a new WebUI window object.</summary>
        /// <returns>Returns the window number.</returns>
        public static ulong NewWindow()
        {
            var ___ret = __Internal.NewWindow();
            return ___ret;
        }

        /// <summary>Create a new webui window object using a specified window number.</summary>
        /// <param name="window_number">The window number (should be &gt; 0, and&lt;WEBUI_MAX_IDS)</param>
        /// <returns>Returns the window number.</returns>
        public static ulong NewWindowId(ulong window_number)
        {
            var ___ret = __Internal.NewWindowId(window_number);
            return ___ret;
        }

        /// <summary>
        /// <para>Get a free window number that can be used with</para>
        /// <para>`webui_new_window_id()`.</para>
        /// </summary>
        /// <returns>Returns the first available free window number. Starting from 1.</returns>
        public static ulong GetNewWindowId()
        {
            var ___ret = __Internal.GetNewWindowId();
            return ___ret;
        }

        /// <summary>
        /// <para>Bind a specific html element click event with a function. Empty</para>
        /// <para>element means all events.</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <param name="element">The HTML ID</param>
        /// <param name="func">The callback function</param>
        /// <returns>Returns a unique bind ID.</returns>
        public static ulong Bind(ulong window, string element, global::WebUI.Delegates.Action___IntPtr func)
        {
            var __arg2 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var ___ret = __Internal.Bind(window, element, __arg2);
            return ___ret;
        }

        /// <summary>
        /// <para>Show a window using embedded HTML, or a file. If the window is already</para>
        /// <para>open, it will be refreshed.</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <param name="content">The HTML, URL, Or a local file</param>
        /// <returns>
        /// <para>Returns True if showing the window is successed.</para>
        /// <para>&quot;index.html&quot;); | webui_show(myWindow, &quot;http://...&quot;);</para>
        /// </returns>
        public static bool Show(ulong window, string content)
        {
            var ___ret = __Internal.Show(window, content);
            return ___ret;
        }

        /// <summary>Same as `webui_show()`. But using a specific web browser.</summary>
        /// <param name="window">The window number</param>
        /// <param name="content">The HTML, Or a local file</param>
        /// <param name="browser">The web browser to be used</param>
        /// <returns>
        /// <para>Returns True if showing the window is successed.</para>
        /// <para>webui_show(myWindow, &quot;index.html&quot;, Firefox);</para>
        /// </returns>
        public static bool ShowBrowser(ulong window, string content, ulong browser)
        {
            var ___ret = __Internal.ShowBrowser(window, content, browser);
            return ___ret;
        }

        /// <summary>Set the window in Kiosk mode (Full screen)</summary>
        /// <param name="window">The window number</param>
        /// <param name="status">True or False</param>
        public static void SetKiosk(ulong window, bool status)
        {
            __Internal.SetKiosk(window, status);
        }

        /// <summary>Wait until all opened windows get closed.</summary>
        public static void Wait()
        {
            __Internal.Wait();
        }

        /// <summary>Close a specific window only. The window object will still exist.</summary>
        /// <param name="window">The window number</param>
        public static void Close(ulong window)
        {
            __Internal.Close(window);
        }

        /// <summary>Close a specific window and free all memory resources.</summary>
        /// <param name="window">The window number</param>
        public static void Destroy(ulong window)
        {
            __Internal.Destroy(window);
        }

        /// <summary>Close all open windows. `webui_wait()` will return (Break).</summary>
        public static void Exit()
        {
            __Internal.Exit();
        }

        /// <summary>Set the web-server root folder path for a specific window.</summary>
        /// <param name="window">The window number</param>
        /// <param name="path">The local folder full path</param>
        public static bool SetRootFolder(ulong window, string path)
        {
            var ___ret = __Internal.SetRootFolder(window, path);
            return ___ret;
        }

        /// <summary>
        /// <para>Set the web-server root folder path for all windows. Should be used</para>
        /// <para>before `webui_show()`.</para>
        /// </summary>
        /// <param name="path">The local folder full path</param>
        public static bool SetDefaultRootFolder(string path)
        {
            var ___ret = __Internal.SetDefaultRootFolder(path);
            return ___ret;
        }

        /// <summary>Set a custom handler to serve files.</summary>
        /// <param name="window">The window number</param>
        /// <param name="handler">
        /// <para>The handler function: `void myHandler(const char* filename,</para>
        /// <para>int* length)`</para>
        /// </param>
        /// <returns>Returns a unique bind ID.</returns>
        public static void SetFileHandler(ulong window, global::WebUI.Delegates.Func___IntPtr_string8_intPtr handler)
        {
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            __Internal.SetFileHandler(window, __arg1);
        }

        /// <summary>Check if the specified window is still running.</summary>
        /// <param name="window">The window number</param>
        public static bool IsShown(ulong window)
        {
            var ___ret = __Internal.IsShown(window);
            return ___ret;
        }

        /// <summary>Set the maximum time in seconds to wait for the browser to start.</summary>
        /// <param name="second">The timeout in seconds</param>
        public static void SetTimeout(ulong second)
        {
            __Internal.SetTimeout(second);
        }

        /// <summary>Set the default embedded HTML favicon.</summary>
        /// <param name="window">The window number</param>
        /// <param name="icon">The icon as string: `&gt;...&gt;`</param>
        /// <param name="icon_type">The icon type: `image/svg+xml`</param>
        public static void SetIcon(ulong window, string icon, string icon_type)
        {
            __Internal.SetIcon(window, icon, icon_type);
        }

        /// <summary>
        /// <para>Base64 encoding. Use this to safely send text based data to the UI. If</para>
        /// <para>it fails it will return NULL.</para>
        /// </summary>
        /// <param name="str">The string to encode (Should be null terminated)</param>
        public static sbyte* Encode(string str)
        {
            var ___ret = __Internal.Encode(str);
            return ___ret;
        }

        /// <summary>
        /// <para>Base64 decoding. Use this to safely decode received Base64 text from</para>
        /// <para>the UI. If it fails it will return NULL.</para>
        /// </summary>
        /// <param name="str">The string to decode (Should be null terminated)</param>
        public static sbyte* Decode(string str)
        {
            var ___ret = __Internal.Decode(str);
            return ___ret;
        }

        /// <summary>Safely free a buffer allocated by WebUI using `webui_malloc()`.</summary>
        /// <param name="ptr">The buffer to be freed</param>
        public static void Free(__IntPtr ptr)
        {
            __Internal.Free(ptr);
        }

        /// <summary>
        /// <para>Safely allocate memory using the WebUI memory management system. It</para>
        /// <para>can be safely freed using `webui_free()` at any time.</para>
        /// </summary>
        /// <param name="size">The size of memory in bytes</param>
        public static __IntPtr Malloc(ulong size)
        {
            var ___ret = __Internal.Malloc(size);
            return ___ret;
        }

        /// <summary>Safely send raw data to the UI.</summary>
        /// <param name="window">The window number</param>
        /// <param name="function">
        /// <para>The JavaScript function to receive raw data: `function</para>
        /// <para>myFunc(myData){}`</para>
        /// </param>
        /// <param name="raw">The raw data buffer</param>
        /// <param name="size">The raw data size in bytes</param>
        public static void SendRaw(ulong window, string function, __IntPtr raw, ulong size)
        {
            __Internal.SendRaw(window, function, raw, size);
        }

        /// <summary>Set a window in hidden mode. Should be called before `webui_show()`.</summary>
        /// <param name="window">The window number</param>
        /// <param name="status">The status: True or False</param>
        public static void SetHide(ulong window, bool status)
        {
            __Internal.SetHide(window, status);
        }

        /// <summary>Set the window size.</summary>
        /// <param name="window">The window number</param>
        /// <param name="width">The window width</param>
        /// <param name="height">The window height</param>
        public static void SetSize(ulong window, uint width, uint height)
        {
            __Internal.SetSize(window, width, height);
        }

        /// <summary>Set the window position.</summary>
        /// <param name="window">The window number</param>
        /// <param name="x">The window X</param>
        /// <param name="y">The window Y</param>
        public static void SetPosition(ulong window, uint x, uint y)
        {
            __Internal.SetPosition(window, x, y);
        }

        /// <summary>
        /// <para>Set the web browser profile to use. An empty `name` and `path` means</para>
        /// <para>the default user profile. Need to be called before `webui_show()`.</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <param name="name">The web browser profile name</param>
        /// <param name="path">The web browser profile full path</param>
        /// <remarks>webui_set_profile(myWindow, &quot;&quot;, &quot;&quot;);</remarks>
        public static void SetProfile(ulong window, string name, string path)
        {
            __Internal.SetProfile(window, name, path);
        }

        /// <summary>Set the web browser proxy_server to use. Need to be called before `webui_show()`.</summary>
        /// <param name="window">The window number</param>
        /// <param name="proxy_server">The web browser proxy_server</param>
        public static void SetProxy(ulong window, string proxy_server)
        {
            __Internal.SetProxy(window, proxy_server);
        }

        /// <summary>Get the full current URL.</summary>
        /// <param name="window">The window number</param>
        /// <returns>Returns the full URL string</returns>
        public static string GetUrl(ulong window)
        {
            var ___ret = __Internal.GetUrl(window);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Allow a specific window address to be accessible from a public network</summary>
        /// <param name="window">The window number</param>
        /// <param name="status">True or False</param>
        public static void SetPublic(ulong window, bool status)
        {
            __Internal.SetPublic(window, status);
        }

        /// <summary>Navigate to a specific URL</summary>
        /// <param name="window">The window number</param>
        /// <param name="url">Full HTTP URL</param>
        public static void Navigate(ulong window, string url)
        {
            __Internal.Navigate(window, url);
        }

        /// <summary>Free all memory resources. Should be called only at the end.</summary>
        /// <remarks>
        /// <para>webui_wait();</para>
        /// <para>webui_clean();</para>
        /// </remarks>
        public static void Clean()
        {
            __Internal.Clean();
        }

        /// <summary>
        /// <para>Delete all local web-browser profiles folder. It should called at the</para>
        /// <para>end.</para>
        /// </summary>
        /// <remarks>
        /// <para>webui_wait();</para>
        /// <para>webui_delete_all_profiles();</para>
        /// <para>webui_clean();</para>
        /// </remarks>
        public static void DeleteAllProfiles()
        {
            __Internal.DeleteAllProfiles();
        }

        /// <summary>Delete a specific window web-browser local folder profile.</summary>
        /// <param name="window">The window number</param>
        /// <remarks>
        /// <para>webui_wait();</para>
        /// <para>webui_delete_profile(myWindow);</para>
        /// <para>webui_clean();</para>
        /// <para>This can break functionality of other windows if using the same</para>
        /// <para>web-browser.</para>
        /// </remarks>
        public static void DeleteProfile(ulong window)
        {
            __Internal.DeleteProfile(window);
        }

        /// <summary>
        /// <para>Get the ID of the parent process (The web browser may re-create</para>
        /// <para>another new process).</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <returns>Returns the the parent process id as integer</returns>
        public static ulong GetParentProcessId(ulong window)
        {
            var ___ret = __Internal.GetParentProcessId(window);
            return ___ret;
        }

        /// <summary>Get the ID of the last child process.</summary>
        /// <param name="window">The window number</param>
        /// <returns>Returns the the child process id as integer</returns>
        public static ulong GetChildProcessId(ulong window)
        {
            var ___ret = __Internal.GetChildProcessId(window);
            return ___ret;
        }

        /// <summary>
        /// <para>Set a custom web-server network port to be used by WebUI.</para>
        /// <para>This can be useful to determine the HTTP link of `webui.js` in case</para>
        /// <para>you are trying to use WebUI with an external web-server like NGNIX</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <param name="port">The web-server network port WebUI should use</param>
        /// <returns>Returns True if the port is free and usable by WebUI</returns>
        public static bool SetPort(ulong window, ulong port)
        {
            var ___ret = __Internal.SetPort(window, port);
            return ___ret;
        }

        /// <summary>
        /// <para>Set the SSL/TLS certificate and the private key content, both in PEM</para>
        /// <para>format. This works only with `webui-2-secure` library. If set empty WebUI</para>
        /// <para>will generate a self-signed certificate.</para>
        /// </summary>
        /// <param name="certificate_pem">The SSL/TLS certificate content in PEM format</param>
        /// <param name="private_key_pem">The private key content in PEM format</param>
        /// <returns>
        /// <para>Returns True if the certificate and the key are valid.</para>
        /// <para>CERTIFICATE-----&quot;-----BEGIN PRIVATE KEY-----</para>
        /// </returns>
        public static bool SetTlsCertificate(string certificate_pem, string private_key_pem)
        {
            var ___ret = __Internal.SetTlsCertificate(certificate_pem, private_key_pem);
            return ___ret;
        }

        /// <summary>Run JavaScript without waiting for the response.</summary>
        /// <param name="window">The window number</param>
        /// <param name="script">The JavaScript to be run</param>
        public static void Run(ulong window, string script)
        {
            __Internal.Run(window, script);
        }

        /// <summary>
        /// <para>Run JavaScript and get the response back.</para>
        /// <para>Make sure your local buffer can hold the response.</para>
        /// </summary>
        /// <param name="window">The window number</param>
        /// <param name="script">The JavaScript to be run</param>
        /// <param name="timeout">The execution timeout</param>
        /// <param name="buffer">The local buffer to hold the response</param>
        /// <param name="buffer_length">The local buffer size</param>
        /// <returns>Returns True if there is no execution error</returns>
        public static bool Script(ulong window, string script, ulong timeout, sbyte* buffer, ulong buffer_length)
        {
            var ___ret = __Internal.Script(window, script, timeout, buffer, buffer_length);
            return ___ret;
        }

        /// <summary>Chose between Deno and Nodejs as runtime for .js and .ts files.</summary>
        /// <param name="window">The window number</param>
        /// <param name="runtime">Deno | Nodejs</param>
        public static void SetRuntime(ulong window, ulong runtime)
        {
            __Internal.SetRuntime(window, runtime);
        }

        /// <summary>Get an argument as integer at a specific index</summary>
        /// <param name="e">The event struct</param>
        /// <param name="index">The argument position starting from 0</param>
        /// <returns>Returns argument as integer</returns>
        public static long GetIntAt(global::WebUI.Event e, ulong index)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetIntAt(__arg0, index);
            return ___ret;
        }

        /// <summary>Get the first argument as integer</summary>
        /// <param name="e">The event struct</param>
        /// <returns>Returns argument as integer</returns>
        public static long GetInt(global::WebUI.Event e)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetInt(__arg0);
            return ___ret;
        }

        /// <summary>Get an argument as string at a specific index</summary>
        /// <param name="e">The event struct</param>
        /// <param name="index">The argument position starting from 0</param>
        /// <returns>Returns argument as string</returns>
        public static string GetStringAt(global::WebUI.Event e, ulong index)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetStringAt(__arg0, index);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get the first argument as string</summary>
        /// <param name="e">The event struct</param>
        /// <returns>Returns argument as string</returns>
        public static string GetString(global::WebUI.Event e)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetString(__arg0);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get an argument as boolean at a specific index</summary>
        /// <param name="e">The event struct</param>
        /// <param name="index">The argument position starting from 0</param>
        /// <returns>Returns argument as boolean</returns>
        public static bool GetBoolAt(global::WebUI.Event e, ulong index)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetBoolAt(__arg0, index);
            return ___ret;
        }

        /// <summary>Get the first argument as boolean</summary>
        /// <param name="e">The event struct</param>
        /// <returns>Returns argument as boolean</returns>
        public static bool GetBool(global::WebUI.Event e)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetBool(__arg0);
            return ___ret;
        }

        /// <summary>Get the size in bytes of an argument at a specific index</summary>
        /// <param name="e">The event struct</param>
        /// <param name="index">The argument position starting from 0</param>
        /// <returns>Returns size in bytes</returns>
        public static ulong GetSizeAt(global::WebUI.Event e, ulong index)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetSizeAt(__arg0, index);
            return ___ret;
        }

        /// <summary>Get size in bytes of the first argument</summary>
        /// <param name="e">The event struct</param>
        /// <returns>Returns size in bytes</returns>
        public static ulong GetSize(global::WebUI.Event e)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            var ___ret = __Internal.GetSize(__arg0);
            return ___ret;
        }

        /// <summary>Return the response to JavaScript as integer.</summary>
        /// <param name="e">The event struct</param>
        /// <param name="n">The integer to be send to JavaScript</param>
        public static void ReturnInt(global::WebUI.Event e, long n)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            __Internal.ReturnInt(__arg0, n);
        }

        /// <summary>Return the response to JavaScript as string.</summary>
        /// <param name="e">The event struct</param>
        /// <param name="n">The string to be send to JavaScript</param>
        public static void ReturnString(global::WebUI.Event e, string s)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            __Internal.ReturnString(__arg0, s);
        }

        /// <summary>Return the response to JavaScript as boolean.</summary>
        /// <param name="e">The event struct</param>
        /// <param name="n">The boolean to be send to JavaScript</param>
        public static void ReturnBool(global::WebUI.Event e, bool b)
        {
            var __arg0 = e is null ? __IntPtr.Zero : e.__Instance;
            __Internal.ReturnBool(__arg0, b);
        }

        /// <summary>Bind a specific HTML element click event with a function. Empty element means all events.</summary>
        /// <param name="window">The window number</param>
        /// <param name="element">The element ID</param>
        /// <param name="func">The callback as myFunc(Window, EventType, Element, EventNumber, BindID)</param>
        /// <returns>Returns unique bind ID</returns>
        public static ulong InterfaceBind(ulong window, string element, global::WebUI.Delegates.Action_ulong_ulong_string8_ulong_ulong func)
        {
            var __arg2 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var ___ret = __Internal.InterfaceBind(window, element, __arg2);
            return ___ret;
        }

        /// <summary>When using `webui_interface_bind()`, you may need this function to easily set a response.</summary>
        /// <param name="window">The window number</param>
        /// <param name="event_number">The event number</param>
        /// <param name="response">The response as string to be send to JavaScript</param>
        public static void InterfaceSetResponse(ulong window, ulong event_number, string response)
        {
            __Internal.InterfaceSetResponse(window, event_number, response);
        }

        /// <summary>Check if the app still running.</summary>
        /// <returns>Returns True if app is running</returns>
        public static bool InterfaceIsAppRunning()
        {
            var ___ret = __Internal.InterfaceIsAppRunning();
            return ___ret;
        }

        /// <summary>Get a unique window ID.</summary>
        /// <param name="window">The window number</param>
        /// <returns>Returns the unique window ID as integer</returns>
        public static ulong InterfaceGetWindowId(ulong window)
        {
            var ___ret = __Internal.InterfaceGetWindowId(window);
            return ___ret;
        }

        /// <summary>Get an argument as string at a specific index</summary>
        /// <param name="window">The window number</param>
        /// <param name="event_number">The event number</param>
        /// <param name="index">The argument position</param>
        /// <returns>Returns argument as string</returns>
        public static string InterfaceGetStringAt(ulong window, ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetStringAt(window, event_number, index);
            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ___ret);
        }

        /// <summary>Get an argument as integer at a specific index</summary>
        /// <param name="window">The window number</param>
        /// <param name="event_number">The event number</param>
        /// <param name="index">The argument position</param>
        /// <returns>Returns argument as integer</returns>
        public static long InterfaceGetIntAt(ulong window, ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetIntAt(window, event_number, index);
            return ___ret;
        }

        /// <summary>Get an argument as boolean at a specific index</summary>
        /// <param name="window">The window number</param>
        /// <param name="event_number">The event number</param>
        /// <param name="index">The argument position</param>
        /// <returns>Returns argument as boolean</returns>
        public static bool InterfaceGetBoolAt(ulong window, ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetBoolAt(window, event_number, index);
            return ___ret;
        }

        /// <summary>Get the size in bytes of an argument at a specific index</summary>
        /// <param name="window">The window number</param>
        /// <param name="event_number">The event number</param>
        /// <param name="index">The argument position</param>
        /// <returns>Returns size in bytes</returns>
        public static ulong InterfaceGetSizeAt(ulong window, ulong event_number, ulong index)
        {
            var ___ret = __Internal.InterfaceGetSizeAt(window, event_number, index);
            return ___ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr(__IntPtr e);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr_string8_intPtr([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string filename, int* length);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action_ulong_ulong_string8_ulong_ulong(ulong window, ulong event_type, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string element, ulong event_number, ulong bind_id);
    }
}
